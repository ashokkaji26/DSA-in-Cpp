

                                             ******************* DSA Basics *********************

*** Important Points:- 

1. Segmentation fault :- We are trying to access the element which is not possible to access in memeory.

2. A question can be solved using Array or Vector both can solve equally.

3. When c++ containers are passed to the function, they are "Pass by value" by default. And to make them "Pass by refrence", we add "&"
   before vector name. like this:- (vector<int> &vector_name). by adding '&' we created alias(alternate name) of original vector,hence any 
   changes made in function directly change the original vector.

4. n ^ n = 0, n ^ 0 = n.

5. Static Vs Dynamic memeory allocation :- 

        ---> Code runs in two stages:- 1. Compile and 2. Run/execution

                                        * Static memeory allocation:- 1. Memory allocated during compilation.
                                                                      2. In static memory
                                                                      3. Array

                                        * Dynamic memeory allocation:- 1. Memory allocated during execution.
                                                                       2. In Heap memory
                                                                       3. Vector

    *** During DSA or coding, most of the time we required resizable array that is "Vectors".

    *** How vectors actually created in memory :- 

                --> Internally vectors are arrays.
                --> As vectors are Internally arrays, so if we push an element into vector, array will try to accommodate new element in the array,
                    if there is space availabe  then the element will be stored, but if space is not available then a new array will be created of double size as
                    previous array and previous elements got copied to the new array automatically, and new element get stored here, this Process
                    of creating new array of double sized continues ... and we think vector's size increase or decrease magically.

                --> Vector's properties:- 1. Size - no. of elements in vector.
                                          2. capacity - Total space in array.

---------------------------------------------------------------------------------------------------------------------------------------     

*** Topics: - 1.  Flowchart
              2.  PsuedoCode
              3.  How to solve any problems.
              4.  Variables, data types, Operators & operator precedence.
              5.  Conditional statements
              6.  Loops & Important concept
              7.  Scope of variable
              8.  Pattern printing
              9.  Binary Number System
             10.  Code: Decimal --> Binary
             11.  Code: Binary --> Decimal
             12.  Converting data from one type to another
             13.  Data type modifiers
             14.  ASCII system
             15.  2's complement
             16.  Functions & Functions in memory
             17.  Pass by value & Pass by refrence
             18.  Arrays
             19.  Vectors
 
                                                      
--------------------------------------------------------------------------------------------------------------------------------------- 

1. Flowchart :- It is a diagram of a solution.
            --> Uses different blocks for different steps.
            --> start/end - Oval shape.
            --> input/output - Parallelogram.
            --> Condition(yes/no) - diamond.
            --> Process - Rectangle.
        
--------------------------------------------------------------------------------------------------------------------------------------- 

2. PsuedoCode :- It is a general logic of any solution.
              --> written in english-like language.
              --> does'nt follow any syntax.

--------------------------------------------------------------------------------------------------------------------------------------- 

3. How to solve any problems: - 
                            Step1 :- Understand the question.
                            Step2 :- Anlyze the inputs.
                            Step3 :- Find best possible solution.
                            Step4 :- Convert that solution into code/program.

--------------------------------------------------------------------------------------------------------------------------------------- 

4. (a.) Variables :- It is a container that stores some values.
                  --> It is a name of memory location.

    (b.) Data Types :- it tells which type of data is stored in our Variables/memory.

                    ** Primitive(Most basic) Data Types :- 1. int (4 bytes)
                                               2. char (1 bytes)
                                               3. float (4 bytes)
                                               4. bool (1 bytes)
                                               5. double (8 bytes)

    (c.) Operators :- Operators perform some operations.

                    1. Arithmetic Operators :- perform mathematical operations.
                                            ---> + , - , * , / , %

                    2. Relational Operators :- tells the relation between two operands, returns yes or no.
                                            ---> < , <= , > , >= , == , !=

                    3. Logical Operators :- $$ , || , !     

                    4.  Bitwise operators :- Perform on binaray form of numbers.
                                          1. Bitwise & 
                                          2. Bitwise |
                                          3. Bitwise ^
                                          4. Bitwise << 
                                          5. Bitwise >>

                    5. Operator precedence(priority) :- 
                                                     a. ! , a++, a--        (right --> Left)
                                                     b. * , / , %           (L --> R)   
                                                     c. + , -               (L --> R) 
                                                     d. > , >= , < , <=     (L --> R)    
                                                     e. == , !=             (L --> R)    
                                                     f. &&                  (L --> R)
                                                     g. ||                  (L --> R)
                                                     h. ==                  (L --> R)  

--------------------------------------------------------------------------------------------------------------------------------------- 

5. Conditional statements :- Helps in taking decision, by returning values only yes or no.
                          --> if , if else , if else-if else. 

--------------------------------------------------------------------------------------------------------------------------------------- 

6. Loops :- Used to perform repititive task.
            (a.) For Loop
            (b.) while Loop
            (c.) Do-while Loop


            *** Important concept of Loops:- 
            for(int i = 0; i < 4; i++) {
                int num;  
                cin >> Pi;
            }

            concept:- 	
                1.	Scope:
	                    •	The variable num in this code is declared within the { } block of the for loop.
	                    •	Because of this, it is only accessible within that specific iteration of the loop.
	                    •	Each time a new loop iteration begins, the previous instance of num, no longer exists within that scope.

	            2.	Lifetime:
	                    •	When num goes out of scope (i.e., when the loop iteration finishes), it is automatically destroyed to free up memory.
	                    •	C++ uses this approach to optimize memory usage. If num were to persist across all loop iterations,
                            it would occupy memory unnecessarily, which could become a problem if many variables were declared this way or if there were a large number of loop iterations.
            
--------------------------------------------------------------------------------------------------------------------------------------- 

7. Scope of variable:- Area where we can access and use variables.

                        1. Local scope:-
                                        a. if-else
                                        b. Loops
                                        c. Functions
                                        d. Block of code {}

                        2. Global scope:- variable that can be used everywhere in program.
                                        ex:- a variable declared before main() Function have a global scope.

--------------------------------------------------------------------------------------------------------------------------------------- 

8. Pattern printing :- 
                    Step 1:- find no. of rows. => no. of times outer loop will run.
                    Step 2:- (a.) find no. of characters in each row => no. of times inner loop will run.
                             (b.) find what to print in particular row, and build logic accordingly.

--------------------------------------------------------------------------------------------------------------------------------------- 

9. Binary Number System:- 

                        --> Number system:- No. of digits used for calculation.
                        --> Maths: Decimal no. system --> 10 digits. Base10.
                        --> Binary no. system :- 2 digits (0,1), Base2.

                        0 - 0
                        1 - 1
                        2 - 10
                        3 - 11
                        4 - 100
                        5 - 101
                        6 - 110
                        7 - 111
                        8 - 1000
                        9 - 1001
                        10 - 1010

                    *Conversion:- 
                                1. Decimal to binary:- 
                                                    --> repititive division with 2 until quotient becomes 0, & note remainder in each division.
                                                    --> Then arrange remainders starting from down to up.

                                     **Shortcut:- 42-->  0  1  0  1  0  1  0        
                                                        -- -- -- -- -- -- -- 
                                                        64 32 16  8  4  2  1

                                2. Binary to Decimal:-   0     1     0     1     0     1     0 
                                                         --    --    --    --    --    --    -- 
                                                        X64 + X32 + X16 + X8  + X4  + X2  + X1

----------------------------------------------------------------------------------------------------------------------------------------

10. Code: Decimal --> Binary                           

                            int decToBin(int n){       // function to convert Decimal to binary.

                                int remainder;
                                int power = 1;
                                int binNo = 0;

                                while(n>0){
                                    remainder = n % 2;                                    
                                    binNo = binNo + remainder * power;
                                    n = n / 2;
                                    power = power * 10;
                                }
                                return binNo;
                            }
--------------------------------------------------------------------------------------------------------------------------------------- 

11. Code: Binary --> Decimal

                            int binToDec(int binNo){     // function to convert binary no to decimal no.

                                int remainder;
                                int power = 1;
                                int decNo = 0;

                                while(n > 0){
                                    remainder = binNo % 10;
                                    decNo = decNo + remainder * power;
                                    binNo = binNo / 10;
                                    power = power * 2;
                                }
                                return decNo;
                            }
--------------------------------------------------------------------------------------------------------------------------------------- 

12. Converting data from one type to another :- 

                                            1. Conversion :- 
                                                         --> Implicit(automatically)
                                                         --> Small data type to big data type
                                                         --> char grade = 'a';
                                                             int mark = grade;
                                                             cout<<mark; --> 97

                                            2. Type  casting :- 
                                                            --> explicit(forcefully we have to do)
                                                            --> Big data type to small data type
                                                            --> double price = 100.99;
                                                                int newPrice = (int)price;
                                                                cout<<newPrice; --> 100

        *** Whenever Arithmetic operation is performed between two data types, answer will occur in big data type.

--------------------------------------------------------------------------------------------------------------------------------------- 

13. Data Type modifiers :- 
                        --> Increase/decrease the capacity of variables.

                        1. long (>= 4 Bytes) :- generally used with int.
                        2. short (2 Bytes) :- short int x;
                        3. long long (8 Bytes) :- long long int.
                        4. signed int (+ve + -ve) :- -2^31 to +2^31-1
                        5. singed int (only +ve values) :- 0 to 2^32-1

--------------------------------------------------------------------------------------------------------------------------------------- 

14. ASCII (American standard code for information interchange) :- 

                                            --> It assigns a numeric value to each character such as letters,digits, 
                                                punctuation marks and control characters. 

                                            --> A(65)..... Z(90)
                                            --> a(97)..... z(122)

--------------------------------------------------------------------------------------------------------------------------------------- 

15. 2's complement :- 

                --> Used when we need to store -ve nos. in computer.
                --> int n = -10;
                          1. convert  10 to binary form.
                          2. prefix with a 0. act as MSB(most significant bit). 0 -> +ve, 1 -> -ve.
                          3. 1's complement. 0 --> 1 & 1 --> 0;
                          4. add 1.


        *** Converting -ve binary no. to decimal:- 

                                        1. 1's complement.
                                        2. add 1. 

--------------------------------------------------------------------------------------------------------------------------------------- 

16. Functions:- a function is a block of code that performs a specific task. Functions are used to break down complex problems into smaller,
                 manageable pieces, making the code more modular, reusable, and easier to understand.

            --> return_type function_name(parameters) {
                                                        // body of the function
                                                    }
            
            --> Literals:- Which doesn't change. eg:- 1,10, 'a', etc.
            --> arguements:- Actual value passed to the function.
            --> parameters :- copy of the arguements.
            --> arguements are also Literals.
            --> Identifiers :- Name of variables and functions.
            --> Main function is automatically called by compiler.
            --> If function is not returning any value then, it will return the control of the program, using 'void' keyword.


        ***** Functions in memory :- 
                                    1. Stack memory - Static allocation
                                    2. heap memory - Dynamic allocation 

                                    --> Functions are stored in Stack memory called 'Call Stack'. 
                                    --> Stack frame:- each function in call stack is a stack frame.
                                    --> functions sotored in call stack in layered form, 1st function will be at buttom of the stack and upcoming 
                                        calling functions are stored order wise in call stack as they called by calling function.
                                    --> As soon as a function return some value, it will be deleted from the call stack, hence no variables can be 
                                        acceesed later in other functions, and  contro goes to calling function.

---------------------------------------------------------------------------------------------------------------------------------------

17. Pass by Value and Pass by Refrence:- 

                                    1. Pass by value:- 
                                                    --> Copy of arguement is passed to function.
                                                    --> primitive data type => Pass by value.

                                    2. Pass by refrence(address):-
                                                    --> Address of actual variable is passed to functions, allowing the function to modify the original variable.
                                                    --> Generally Used For: Non-primitive data types Examples: Arrays, Objects, Structs, Vectors.

                                    **Pass by Value: Efficient for primitive data types.
                                    **Pass by Reference: Efficient for non-primitive data types. 

---------------------------------------------------------------------------------------------------------------------------------------

18. Arrays:- 1st data structures.
            1. Same type of data
            2. contiguous in memory
            3. Linear data structure

            --> data structures:- used to store datas.
            --> Algorithms:- Operations perfomed on datas like:- sorting, searching.

            * Create :- 
                    1. int marks[5];
                    2. int marks[]; // empty Arrays
                    3. int marks[5] = {1,2,3,4,5};
                    4. int marks[] = {1,2,3,4,5,6,}; // array's size = 6.

            ** Array index:- 
                       --> each block of array gets a possible called index, so that each block can be accessed and used.
                       --> indexing:- 0 to n-1.
                       --> Each index can be treated as a single variable.
                       --> size of an array => no. of blocks(indices/elements).
                       --> sizeof(array); // to find memory occupied in bytes.
                       --> size of an array = sizeof(array) / sizeof(data type/one block size).

            ** Linears search Algorithm:- checks each index. 

            ** questions:- 1. Max/min element in an array.
                           2. find index of largest and smallest number.
                           3. find a target value using linear search Algorithm.
                           4. Reverse an array using two pointer approach.

---------------------------------------------------------------------------------------------------------------------------------------

19. Vectors:- 2nd data structure, But very similar to Array, the only difference is that vector is dynamic in nature and array is static in nature.
                Means size of vectors can be changed but size of arrays are fixed.

            ---> All other functions will be perform like array.

            * STL (standard template library) :-
                                        ---> standard c++ library, where implementation codes of all data structures are stored, and 
                                             we just use different data structures from STL( as a tool box ).
                                        
            * STL Containers:- Different data structures in STL called STL containers.

            *** To create or use Different data structures from STL we have to include respective header files in our code.
               ---> Example:- Vector -> #include <vector> 

            * Create:- 
                    1. vector<int> vector_name;  //empty vector.
                    2. vector<int> vector_name = {1,2,3} 
                    3. vector<int> vector_name(size of the vector, value at each index);

            *** For each loop :- Special type of loop used for vectors.

                --> for(int i : vector_name){
                                             cout<< i <<endl;
                                            }

            * Vector Functions:- 
                                1. Size --> size of the vector.  --> vector_name.size();
                                2. push_back --> add elements at the end of the vector.  --> vector_name.push_back(5);
                                3. pop_back --> delete last element from vector. --> vector_name.pop_back();  // no need to mention element here.
                                4. front --> to access the 1st element of vector. --> cout<< vector_name.front();
                                5. back --> to access the last element of vector. --> cout<< vector_name.back();
                                6. at --> to access element at particular index. --> vector_name.at(i);  // to access ith index element.
                                7. capacity --> to find the capacity of vector. --> vector_name.capacity();

                                *** To access a particular element in vector :- vector_name[i] and vector_name.at[i]  both are same.

---------------------------------------------------------------------------------------------------------------------------------------

20.

---------------------------------------------------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------------------------------------------------
